Mongo DB Notes
--------------

MongoDB is a 
-->  Document Oriented: Document-oriented refers that the data in the database is stored in the form of documents which are specifically JSON objects.
-->  NOSQL based 
-->  Open-source database management system. [Name orginated: HU-"MONGO"-US]

Note: MongoDB is used to store unstructured and semi-structured data. Whereas we use structured databases(SQL, oracle) to store structured data in form of rows and columns which are basically tables.

Advantages:
-----------
--> Flexibility
--> Scalability
--> Performance

------------------------------------------------------------------------------------------------------------------------------------------------------------

Structure of MongoDB
---------------------
--> Databases have JSON data which is basically called as collections. Collections are nothing but the table which we have in our structured databases. 
--> The data inside the collections is called as document. Document is nothing but the data in the tables of structured datbases.

------------------------------------------------------------------------------------------------------------------------------------------------------------

BSON: BSON stands for Binary JSON. It is the data format that MongoDB uses to organize and store data.

Advantages:
-----------
--> High read and write speeds.
--> Reduces storage requirements.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Basic commonds in MongoDB:
--------------------------
1) show dbs or show databases : Used to see the databases in MongoDB.

2) use database_name : Used to create databases with specified name.

3) db.dropDatabase() : Used to drop the database which is currently in use.

4) db.createCollection('collection_name') : Used to create a collection inside a prefered database.

5) db.collection_name.drop() : Used to drop the collection with specified collection name.

6) mongoimport jsonfilename.json -d database_name -c collection_name : importing json files into the database.

7) mongoimport jsonfilename.json -d database_name -c collection_name --jsonArray : importing json files in the DB which is in the form of array of objects.

8) mongoexport -d database-name -c collection-name -o locationofexport : exporting the data from the db to a required location.

Note: File size of mongoDB should be less or equal to 16MB.

------------------------------------------------------------------------------------------------------------------------------------------------------------

CRUD Operations in MongoDB:
---------------------------

1) Creating Documents in collection:
------------------------------------

Case 1: Inserting a single record into the collection:
-----------------------------------------------------
db.collection_name.insertOne({field1:value1, field2:value2, field3:value3, ....});

Case 2: Inserting multiple record into the collection:
-----------------------------------------------------
db.collection_name.insertMany([{field1:value1, field2:value2, field3:value3},{field1:value1, field2:value2, field3:value3},{...}]);

Ordered and unordered inserts:
------------------------------
Ordered Inserts: This is the default behviour of MongoDB. Here the database behaviour is like if suppose there are 4 insertions in the databases and lets suppose 2nd data is wrong, then after the execution of the first data the insertion terminates.

Example: db.collection_name.insertMany([{id:1, name:saiesh, subject:cse},{id:1, name:dinesh, subject:ise}, {id:2, name:tharun, subject:ece}]);
In this example after inserting the first document, the insertion fails because of same ID conflicts. 

Unordered Inserts: Here the database behaviour is like if suppose there are 4 insertions in the databases and lets suppose 2nd data is wrong, Then the proper 3 insertions will be added and the one which is not correct throws the error.

--> We need to add {ordered: false} at the end of document insertion query.

Example: db.collection_name.insertMany([{id:1, name:saiesh, subject:cse},{id:1, name:dinesh, subject:ise}, {id:2, name:tharun, subject:ece}, {ordered: false}]);
In this example after inserting the first document and third document, the second data insertion fails because of same ID conflicts. 

------------------------------------------------------------------------------------------------------------------------------------------------------------

2) Reading documents in collection:
-----------------------------------
--> find() --> db.collection_name.find({'key':'value'}) [Finds all the data with all the matches of key and values]

--> findOne() --> db.collection_name.findOne('key': 'value'}) [Finds the first data from all the matches of key and values]

Comparison operators:
---------------------
a) $eq: Equal operator helps in checking the exact equality.
Syntax: db.collection_name.find({'key' : {$eq: value}})
Example: db.products.find({'price': {$eq: 699}}) --> This filters the result of the products which has the price match of exact 699.

b) $ne: Not equal operator helps in checking inequality.
Syntax: db.collection_name.find({'key' : {$ne: value}})
Example: db.products.find({'price': {$ne: 400}}) --> This filters the result of the products which has the price match not equal to 400.

c) $gt: Greater than operator helps in checking criteria greater than a certain value.
Syntax: db.collection_name.find({'key' : {$gt: value}})
Example: db.products.find({'price': {$gt: 4500}}) --> This filters the result of the products which has the price greater than 4500.

d) $gte: Greater than or equal to operator helps in checking criteria greater than or equal to a certain value.
Syntax: db.collection_name.find({'key' : {$gte: value}})
Example: db.products.find({'price': {$gte: 3600}}) --> This filters the result of the products which has the price greater than or equal to 3600.

e) $lt: Lesser than operator helps in checking criteria lesser than a certain value.
Syntax: db.collection_name.find({'key' : {$lt: value}})
Example: db.products.find({'price': {$gt: 232}}) --> This filters the result of the products which has the price lesser than 232.

f) $lte: Lesser than or equal to operator helps in checking criteria lesser than or equal to a certain value.
Syntax: db.collection_name.find({'key' : {$gte: value}})
Example: db.products.find({'price': {$lte: 3600}}) --> This filters the result of the products which has the price lesser than or equal to 3600.

g) $in: It helps in finding the details in a given array.
Syntax: db.collection_name.find({'key' : {$in: [array_item1, array_item2, ...]}})
Example: db.products.find({'price': {$in: [12, 14, 16]}}) --> This filters the result of the products which has the price of 12, 14 and 16.

h) $nin: It helps in excluding the details in a given array.
Syntax: db.collection_name.find({'key' : {$nin: [array_item1, array_item2, ...]}})
Example: db.products.find({'price': {$nin: [11, 12, 13]}}) --> This filters the result of the products which doesn't has the price of 12, 14 and 16.

Cursors:
--------
Cursors in MongoDB will help in retreving a large amount of data from queries.

Methods in cursors:
-------------------
a) limit(): It helps in retrieving the amount of documents required.
Syntax: db.collection_name.find({'key': {$gte: value}}).limit(x)
Here x means the number documents that are required.
Example: db.products.find({'price': {$lte: 3600}}).limit(5) --> This retrieves the first 5 documents from the database.

b) sort(): It helps in sorting the data in ascending or descending order.
Syntax: db.collection_name.find({'key': {$gte: value}}).limit(x).sort('key': 1 or -1)
1 --> Ascending order.
-1 --> Descending order.
Example: db.products.find({'price': {$lte: 3600}}).limit(5).sort('price': 1) --> This retrieves the first 5 documents from the database in ascending order.
	 db.products.find({'price': {$lte: 3600}}).limit(5).sort('price': -1) --> This retrieves the first 5 docs from the database in descending order.

c) count(): It simply helps in counting the number of documents.
Syntax: db.collection_name.find({'key': {$gte: value}}).count()
Example: db.products.find({'price': {$lte: 3600}}).count() --> This returns the count of documents having price less than 3600.

d) skip(): It helps in skipping the number of documents specified at the top.
Syntax: db.collection_name.find({'key': {$gte: value}}).skip(x)
Example: db.products.find({'price': {$gte: 3600}}).skip(2) --> This skips the first 2 documents of price greater than 3600 and displays the remaining.

Points to remember:
-------------------
--> Skip is inefficient for larger offset.
--> Sorting of large dataset directly affects the performance.

Logical operators:
------------------
a) $and: AND operator gives the result only when both the condition satisfies.
Syntax: db.collection_name.find({$and:[{condition1},{condition2},...]})
Example: db.products.find({$and:[{'price':{$gt:200}}, {'name':{$eq:'Audi'}]}) --> This displays the name Audi with price greater than 200.
Note: db.products.find('price':{$gt: 200}, 'name':{$eq: 'Audi'}) --> The find method implicitly considers this as an AND operation.

b) $or: OR operator gives the result either if one condition satisfies.
Syntax: db.collection_name.find({$or:[{condition1},{condition2},...]})
Example: db.products.find({$or:[{'rate':{$lt:1200}}, {'brand':{$eq:'Suzuki'}]}) --> This displays the brand Suzuki with price less than 1200.

c) $nor: NOR gives the rest of results other than the results of OR operation.
Syntax: db.collection_name.find({$nor:[{condition1},{condition2},...]})
Example: db.products.find({$nor:[{'price':{$lt:333}}, {'stock':{$eq:'Kerosene'}]}) --> This displays all the results which doesn't have price less than 333 or stock Kerosene.

d) $not: NOT gives the results excluding the condition.
Syntax: db.collection_name.find('key':{$not:{$eq: 300}})
Example: db.products.find('price':{$not:{$eq:300}}) --> This displays all the results where price is not equal to 300.
Note: db.products.find('price':{$ne:300}) --> This also gives the same result as above.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Complex Expressions:
--------------------
This is used to compare same fields in the table.

If we want to make complex operations in the table then we need to use the $expr expression.

Syntax: db.collection_name.find('$expr':{operation: [{$arithematic-operations:[key1, key2, ...]},key-to-compare]}}

Example: db.sales.find('$expr':{$gt: [{$add:[$price, $quantity], $MarginPrice]}}

In this example we can see that we will add price and quantity of the same fields of the table and we will compare if it is greater than the MarginPrice. This kind of operations can be achieved by $expr.

------------------------------------------------------------------------------------------------------------------------------------------------------------

Element Operators:
------------------
a) $exists: Exists is simply used to check the existence of a certain field. 

Syntax: db.collection_name.find({key:{$exists: true/false}})

--> True returns the documents where the given field exists and false does the vice versa.

Example: db.products.find({price:{$exists: true}});

--> The above query returns the documents where the price field exists.

b) $type: Type is simply used to check the data type of a certain field.

Syntax: db.collection_name.find({price:{$type: datatype}})

Example: db.products.find({price:{$type: number}});

--> The above query returns the data of price which has the data type of number.

There are number codes for numbers:

1. Double

2. String

3. Object

4. Array

5. Binary Data

6. Undefined

7. Object ID

8. Boolean

9. Date

10. Null

11. Regular Expressions

Example: db.products.find({price:{$type: 2}});

--> The above query returns the data of price which has the data type of String.

------------------------------------------------------------------------------------------------------------------------------------------------------------



